
AMIT_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c80  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000727  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056c  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000086f  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002e2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 57 00 	call	0xae	; 0xae <main>
  8e:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <HAL_LED_GENERIC_INITIALIZATION>:

#include "../H_FILES/LEDS_CONFIG.h"
#include "../H_FILES/LEDS.h"

 void HAL_LED_GENERIC_INITIALIZATION(uint8_t Copy_u8LedPort , uint8_t Copy_u8LedPin){
	 MCAL_DIO_u8SetPinDir(Copy_u8LedPort , Copy_u8LedPin , DIO_OUTPUT);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 6f 00 	call	0xde	; 0xde <MCAL_DIO_u8SetPinDir>
  9c:	08 95       	ret

0000009e <HAL_LED_GENERIC_turnOn>:
 }

 void HAL_LED_GENERIC_turnOn(uint8_t Copy_u8LedPort , uint8_t Copy_u8LedPin){
	 MCAL_DIO_u8SetPinValue(Copy_u8LedPort , Copy_u8LedPin , DIO_HIGH);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCAL_DIO_u8SetPinValue>
  a4:	08 95       	ret

000000a6 <HAL_LED_GENERIC_turnOff>:
 }

 void HAL_LED_GENERIC_turnOff(uint8_t Copy_u8LedPort , uint8_t Copy_u8LedPin){
	 MCAL_DIO_u8SetPinValue(Copy_u8LedPort , Copy_u8LedPin , DIO_LOW);
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCAL_DIO_u8SetPinValue>
  ac:	08 95       	ret

000000ae <main>:
#include <util/delay.h>

#define F_CPU 8000000UL

int main(void){
	HAL_LED_GENERIC_INITIALIZATION(LED_0);
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	0e 94 4b 00 	call	0x96	; 0x96 <HAL_LED_GENERIC_INITIALIZATION>
	HAL_LED_GENERIC_turnOn(LED_0);
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 4f 00 	call	0x9e	; 0x9e <HAL_LED_GENERIC_turnOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f e7       	ldi	r18, 0x7F	; 127
  c0:	8a e1       	ldi	r24, 0x1A	; 26
  c2:	96 e0       	ldi	r25, 0x06	; 6
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x16>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x20>
  ce:	00 00       	nop
	_delay_ms(2000);
	HAL_LED_GENERIC_turnOff(LED_0);
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 53 00 	call	0xa6	; 0xa6 <HAL_LED_GENERIC_turnOff>

}
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	08 95       	ret

000000de <MCAL_DIO_u8SetPinDir>:
		default :
			Local_u8ErrorStatus = 0;
			break;
	}
	return Local_u8ErrorStatus ;
}
  de:	68 30       	cpi	r22, 0x08	; 8
  e0:	08 f0       	brcs	.+2      	; 0xe4 <MCAL_DIO_u8SetPinDir+0x6>
  e2:	5d c0       	rjmp	.+186    	; 0x19e <MCAL_DIO_u8SetPinDir+0xc0>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	e1 f0       	breq	.+56     	; 0x120 <MCAL_DIO_u8SetPinDir+0x42>
  e8:	30 f0       	brcs	.+12     	; 0xf6 <MCAL_DIO_u8SetPinDir+0x18>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	71 f1       	breq	.+92     	; 0x14a <MCAL_DIO_u8SetPinDir+0x6c>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	09 f4       	brne	.+2      	; 0xf4 <MCAL_DIO_u8SetPinDir+0x16>
  f2:	40 c0       	rjmp	.+128    	; 0x174 <MCAL_DIO_u8SetPinDir+0x96>
  f4:	56 c0       	rjmp	.+172    	; 0x1a2 <MCAL_DIO_u8SetPinDir+0xc4>
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	06 2e       	mov	r0, r22
  fe:	02 c0       	rjmp	.+4      	; 0x104 <MCAL_DIO_u8SetPinDir+0x26>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <MCAL_DIO_u8SetPinDir+0x22>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <MCAL_DIO_u8SetPinDir+0x36>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <MCAL_DIO_u8SetPinDir+0x32>
 118:	48 2b       	or	r20, r24
 11a:	4a bb       	out	0x1a, r20	; 26
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	06 2e       	mov	r0, r22
 128:	02 c0       	rjmp	.+4      	; 0x12e <MCAL_DIO_u8SetPinDir+0x50>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <MCAL_DIO_u8SetPinDir+0x4c>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <MCAL_DIO_u8SetPinDir+0x60>
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <MCAL_DIO_u8SetPinDir+0x5c>
 142:	48 2b       	or	r20, r24
 144:	47 bb       	out	0x17, r20	; 23
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret
 14a:	24 b3       	in	r18, 0x14	; 20
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	06 2e       	mov	r0, r22
 152:	02 c0       	rjmp	.+4      	; 0x158 <MCAL_DIO_u8SetPinDir+0x7a>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <MCAL_DIO_u8SetPinDir+0x76>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <MCAL_DIO_u8SetPinDir+0x8a>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <MCAL_DIO_u8SetPinDir+0x86>
 16c:	48 2b       	or	r20, r24
 16e:	44 bb       	out	0x14, r20	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	06 2e       	mov	r0, r22
 17c:	02 c0       	rjmp	.+4      	; 0x182 <MCAL_DIO_u8SetPinDir+0xa4>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <MCAL_DIO_u8SetPinDir+0xa0>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <MCAL_DIO_u8SetPinDir+0xb4>
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <MCAL_DIO_u8SetPinDir+0xb0>
 196:	48 2b       	or	r20, r24
 198:	41 bb       	out	0x11, r20	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	08 95       	ret
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret

000001a6 <MCAL_DIO_u8SetPinValue>:

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
	if(Copy_u8PinNo >= DIO_PIN_0 && Copy_u8PinNo <= DIO_PIN_7){
 1a6:	68 30       	cpi	r22, 0x08	; 8
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <MCAL_DIO_u8SetPinValue+0x6>
 1aa:	5d c0       	rjmp	.+186    	; 0x266 <MCAL_DIO_u8SetPinValue+0xc0>
		switch(Copy_u8PortNo){
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	e1 f0       	breq	.+56     	; 0x1e8 <MCAL_DIO_u8SetPinValue+0x42>
 1b0:	30 f0       	brcs	.+12     	; 0x1be <MCAL_DIO_u8SetPinValue+0x18>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	71 f1       	breq	.+92     	; 0x212 <MCAL_DIO_u8SetPinValue+0x6c>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	09 f4       	brne	.+2      	; 0x1bc <MCAL_DIO_u8SetPinValue+0x16>
 1ba:	40 c0       	rjmp	.+128    	; 0x23c <MCAL_DIO_u8SetPinValue+0x96>
 1bc:	56 c0       	rjmp	.+172    	; 0x26a <MCAL_DIO_u8SetPinValue+0xc4>
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8Value);
 1be:	2b b3       	in	r18, 0x1b	; 27
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	06 2e       	mov	r0, r22
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <MCAL_DIO_u8SetPinValue+0x26>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <MCAL_DIO_u8SetPinValue+0x22>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <MCAL_DIO_u8SetPinValue+0x36>
 1d8:	44 0f       	add	r20, r20
 1da:	55 1f       	adc	r21, r21
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <MCAL_DIO_u8SetPinValue+0x32>
 1e0:	48 2b       	or	r20, r24
 1e2:	4b bb       	out	0x1b, r20	; 27
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8PinNo >= DIO_PIN_0 && Copy_u8PinNo <= DIO_PIN_7){
		switch(Copy_u8PortNo){
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8Value);
				break ;
 1e6:	08 95       	ret
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8Value);
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	06 2e       	mov	r0, r22
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <MCAL_DIO_u8SetPinValue+0x50>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <MCAL_DIO_u8SetPinValue+0x4c>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <MCAL_DIO_u8SetPinValue+0x60>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <MCAL_DIO_u8SetPinValue+0x5c>
 20a:	48 2b       	or	r20, r24
 20c:	48 bb       	out	0x18, r20	; 24
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8Value);
				break ;
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8Value);
				break ;
 210:	08 95       	ret
			case DIO_PORTC :
				ASSIGN_BIT(PORTC , Copy_u8PinNo , Copy_u8Value);
 212:	25 b3       	in	r18, 0x15	; 21
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	06 2e       	mov	r0, r22
 21a:	02 c0       	rjmp	.+4      	; 0x220 <MCAL_DIO_u8SetPinValue+0x7a>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <MCAL_DIO_u8SetPinValue+0x76>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <MCAL_DIO_u8SetPinValue+0x8a>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <MCAL_DIO_u8SetPinValue+0x86>
 234:	48 2b       	or	r20, r24
 236:	45 bb       	out	0x15, r20	; 21
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8Value);
				break ;
			case DIO_PORTC :
				ASSIGN_BIT(PORTC , Copy_u8PinNo , Copy_u8Value);
				break ;
 23a:	08 95       	ret
			case DIO_PORTD :
				ASSIGN_BIT(PORTD , Copy_u8PinNo , Copy_u8Value);
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	06 2e       	mov	r0, r22
 244:	02 c0       	rjmp	.+4      	; 0x24a <MCAL_DIO_u8SetPinValue+0xa4>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <MCAL_DIO_u8SetPinValue+0xa0>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <MCAL_DIO_u8SetPinValue+0xb4>
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <MCAL_DIO_u8SetPinValue+0xb0>
 25e:	48 2b       	or	r20, r24
 260:	42 bb       	out	0x12, r20	; 18
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 262:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC :
				ASSIGN_BIT(PORTC , Copy_u8PinNo , Copy_u8Value);
				break ;
			case DIO_PORTD :
				ASSIGN_BIT(PORTD , Copy_u8PinNo , Copy_u8Value);
				break ;
 264:	08 95       	ret
			default :
				Local_u8ErrorStatus = 0;
				break;
		}
	}else{
		Local_u8ErrorStatus = 0 ;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
				break ;
			case DIO_PORTD :
				ASSIGN_BIT(PORTD , Copy_u8PinNo , Copy_u8Value);
				break ;
			default :
				Local_u8ErrorStatus = 0;
 26a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}else{
		Local_u8ErrorStatus = 0 ;
	}
	return Local_u8ErrorStatus ;
}
 26c:	08 95       	ret

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
