
AMIT_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000045a  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001632  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afd  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e83  00000000  00000000  000027fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00003680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088c  00000000  00000000  00003a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e9  00000000  00000000  000042a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000538d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_12>
  34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_13>
  38:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  9e:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <HAL_LED_GENERIC_INITIALIZATION>:

#include "../H_FILES/LEDS_CONFIG.h"
#include "../H_FILES/LEDS.h"

 void HAL_LED_GENERIC_INITIALIZATION(uint8_t Copy_u8LedPort , uint8_t Copy_u8LedPin){
	 MCAL_DIO_u8SetPinDir(Copy_u8LedPort , Copy_u8LedPin , DIO_OUTPUT);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <MCAL_DIO_u8SetPinDir>
  ac:	08 95       	ret

000000ae <HAL_LED_GENERIC_TURN_ON>:
 }

 void HAL_LED_GENERIC_TURN_ON(uint8_t Copy_u8LedPort , uint8_t Copy_u8LedPin){
	 MCAL_DIO_u8SetPinValue(Copy_u8LedPort , Copy_u8LedPin , DIO_HIGH);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	0e 94 c7 01 	call	0x38e	; 0x38e <MCAL_DIO_u8SetPinValue>
  b4:	08 95       	ret

000000b6 <HAL_LED_GENERIC_TURN_OFF>:
 }

 void HAL_LED_GENERIC_TURN_OFF(uint8_t Copy_u8LedPort , uint8_t Copy_u8LedPin){
	 MCAL_DIO_u8SetPinValue(Copy_u8LedPort , Copy_u8LedPin , DIO_LOW);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	0e 94 c7 01 	call	0x38e	; 0x38e <MCAL_DIO_u8SetPinValue>
  bc:	08 95       	ret

000000be <MCAL_SPI_SlaveInit>:
	uint16_t Local_Counter = 0 ;
	while(Copy_u8DataSend[Local_Counter] != NULL_CHR){
		MCAL_SPI_Slave_DataCallBack(Copy_u8DataSend[Local_Counter] , Ptr_DataReceive);
		Local_Counter++ ;
	}
}
  be:	6d 98       	cbi	0x0d, 5	; 13
  c0:	6b 9a       	sbi	0x0d, 3	; 13
  c2:	6a 9a       	sbi	0x0d, 2	; 13
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	65 e0       	ldi	r22, 0x05	; 5
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 63 01 	call	0x2c6	; 0x2c6 <MCAL_DIO_u8SetPinDir>
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	66 e0       	ldi	r22, 0x06	; 6
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <MCAL_DIO_u8SetPinDir>
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	67 e0       	ldi	r22, 0x07	; 7
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 63 01 	call	0x2c6	; 0x2c6 <MCAL_DIO_u8SetPinDir>
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <MCAL_DIO_u8SetPinDir>
  ec:	6c 98       	cbi	0x0d, 4	; 13
  ee:	6e 9a       	sbi	0x0d, 6	; 13
  f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
  f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	08 95       	ret

000000fc <MCAL_SPI_Slave_DataBusyWait>:
  fc:	6f 98       	cbi	0x0d, 7	; 13
  fe:	8f b9       	out	0x0f, r24	; 15
 100:	6e 9a       	sbi	0x0d, 6	; 13
 102:	77 9b       	sbis	0x0e, 7	; 14
 104:	fe cf       	rjmp	.-4      	; 0x102 <MCAL_SPI_Slave_DataBusyWait+0x6>
 106:	8f b1       	in	r24, 0x0f	; 15
 108:	fb 01       	movw	r30, r22
 10a:	80 83       	st	Z, r24
 10c:	6e 98       	cbi	0x0d, 6	; 13
 10e:	08 95       	ret

00000110 <__vector_12>:

void __vector_12(void){
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	if(g_MasterMode == SPI_MASTER){
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	81 f4       	brne	.+32     	; 0x15a <__vector_12+0x4a>
		if(Call_Back_Master != NULL_POINTER){
 13a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <Call_Back_Master>
 13e:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <Call_Back_Master+0x1>
 142:	30 97       	sbiw	r30, 0x00	; 0
 144:	a1 f0       	breq	.+40     	; 0x16e <__vector_12+0x5e>
			Call_Back_Master(SPI_SPDR);
 146:	8f b1       	in	r24, 0x0f	; 15
 148:	09 95       	icall
			CLR_BIT(SPI_SPCR , SPI_SPCR_SPE);
 14a:	6e 98       	cbi	0x0d, 6	; 13
			CLR_BIT(SPI_SPCR , SPI_SPCR_SPIE);
 14c:	6f 98       	cbi	0x0d, 7	; 13
			MCAL_DIO_u8SetPinValue(SPI_SS_PIN , DIO_HIGH);
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	64 e0       	ldi	r22, 0x04	; 4
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 c7 01 	call	0x38e	; 0x38e <MCAL_DIO_u8SetPinValue>
 158:	0a c0       	rjmp	.+20     	; 0x16e <__vector_12+0x5e>
		}
	}else if(g_MasterMode == SPI_SLAVE){
 15a:	81 11       	cpse	r24, r1
 15c:	08 c0       	rjmp	.+16     	; 0x16e <__vector_12+0x5e>
		CLR_BIT(SPI_SPCR , SPI_SPCR_SPIE);
 15e:	6f 98       	cbi	0x0d, 7	; 13
		Call_Back_Slave(SPI_SPDR);
 160:	8f b1       	in	r24, 0x0f	; 15
 162:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 166:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
 16a:	09 95       	icall
		CLR_BIT(SPI_SPCR , SPI_SPCR_SPE);
 16c:	6e 98       	cbi	0x0d, 6	; 13
	}
	g_MasterMode = NO_OPERATION;
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_13>:
		SET_BIT(UCSRB , UCSRB_UDRIE); 				/*Enable Transmit Interrupt*/
	}else{
		Local_u8Error  = ERROR;
	}
	return Local_u8Error ;
}
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
 1b8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <UART_RX_CallBack>
 1bc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <UART_RX_CallBack+0x1>
 1c0:	30 97       	sbiw	r30, 0x00	; 0
 1c2:	79 f0       	breq	.+30     	; 0x1e2 <__vector_13+0x4c>
 1c4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_CharacterSize>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	31 f4       	brne	.+12     	; 0x1d8 <__vector_13+0x42>
 1cc:	80 b5       	in	r24, 0x20	; 32
 1ce:	5d 9b       	sbis	0x0b, 5	; 11
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <__vector_13+0x38>
 1d2:	8c b1       	in	r24, 0x0c	; 12
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <__vector_13+0x4a>
 1d8:	5d 9b       	sbis	0x0b, 5	; 11
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <__vector_13+0x42>
 1dc:	8c b1       	in	r24, 0x0c	; 12
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	09 95       	icall
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_14>:

void __vector_14(void){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	UDR = *UART_UDR_CallBack ;
 214:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <UART_UDR_CallBack>
 218:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <UART_UDR_CallBack+0x1>
 21c:	80 81       	ld	r24, Z
 21e:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA , UCSRA_TXC) != 1);
 220:	5e 9b       	sbis	0x0b, 6	; 11
 222:	fe cf       	rjmp	.-4      	; 0x220 <__vector_14+0x1c>
	SET_BIT(UCSRA , UCSRA_TXC);
 224:	5e 9a       	sbi	0x0b, 6	; 11
	CLR_BIT(UCSRB , UCSRB_UDRIE);
 226:	55 98       	cbi	0x0a, 5	; 10
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <slave_Main>:
			break;
		}
	}
}

void slave_Main(){
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	MCAL_SPI_SlaveInit();
 242:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_SPI_SlaveInit>
	HAL_LED_GENERIC_INITIALIZATION(LED_0);
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <HAL_LED_GENERIC_INITIALIZATION>
	HAL_LED_GENERIC_INITIALIZATION(LED_1);
 24e:	67 e0       	ldi	r22, 0x07	; 7
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <HAL_LED_GENERIC_INITIALIZATION>
	uint8_t recieve_char , send = NULL;
	while(1){
		MCAL_SPI_Slave_DataBusyWait(send,&recieve_char);
 256:	be 01       	movw	r22, r28
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 7e 00 	call	0xfc	; 0xfc <MCAL_SPI_Slave_DataBusyWait>
		switch(recieve_char){
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	81 33       	cpi	r24, 0x31	; 49
 266:	91 f0       	breq	.+36     	; 0x28c <slave_Main+0x54>
 268:	18 f4       	brcc	.+6      	; 0x270 <slave_Main+0x38>
 26a:	80 33       	cpi	r24, 0x30	; 48
 26c:	31 f0       	breq	.+12     	; 0x27a <slave_Main+0x42>
 26e:	f3 cf       	rjmp	.-26     	; 0x256 <slave_Main+0x1e>
 270:	83 33       	cpi	r24, 0x33	; 51
 272:	a9 f0       	breq	.+42     	; 0x29e <slave_Main+0x66>
 274:	84 33       	cpi	r24, 0x34	; 52
 276:	e1 f0       	breq	.+56     	; 0x2b0 <slave_Main+0x78>
 278:	ee cf       	rjmp	.-36     	; 0x256 <slave_Main+0x1e>
			case '0' :
				HAL_LED_GENERIC_TURN_ON(LED_0);//to check that the program went through this condition
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	0e 94 57 00 	call	0xae	; 0xae <HAL_LED_GENERIC_TURN_ON>
				HAL_LED_GENERIC_TURN_OFF(LED_1);
 282:	67 e0       	ldi	r22, 0x07	; 7
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 5b 00 	call	0xb6	; 0xb6 <HAL_LED_GENERIC_TURN_OFF>
				break;
 28a:	e5 cf       	rjmp	.-54     	; 0x256 <slave_Main+0x1e>
			case '1' :
				HAL_LED_GENERIC_TURN_OFF(LED_0);//to check that the program went through this condition
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 5b 00 	call	0xb6	; 0xb6 <HAL_LED_GENERIC_TURN_OFF>
				HAL_LED_GENERIC_TURN_ON(LED_1);
 294:	67 e0       	ldi	r22, 0x07	; 7
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 57 00 	call	0xae	; 0xae <HAL_LED_GENERIC_TURN_ON>
				break;
 29c:	dc cf       	rjmp	.-72     	; 0x256 <slave_Main+0x1e>
			case '3' :
				HAL_LED_GENERIC_TURN_ON(LED_0);//to check that the program went through this condition
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 57 00 	call	0xae	; 0xae <HAL_LED_GENERIC_TURN_ON>
				HAL_LED_GENERIC_TURN_ON(LED_1);
 2a6:	67 e0       	ldi	r22, 0x07	; 7
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	0e 94 57 00 	call	0xae	; 0xae <HAL_LED_GENERIC_TURN_ON>
			break;
 2ae:	d3 cf       	rjmp	.-90     	; 0x256 <slave_Main+0x1e>
			case '4' :
				HAL_LED_GENERIC_TURN_OFF(LED_0);//to check that the program went through this condition
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 5b 00 	call	0xb6	; 0xb6 <HAL_LED_GENERIC_TURN_OFF>
				HAL_LED_GENERIC_TURN_OFF(LED_1);
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 5b 00 	call	0xb6	; 0xb6 <HAL_LED_GENERIC_TURN_OFF>
			break;
 2c0:	ca cf       	rjmp	.-108    	; 0x256 <slave_Main+0x1e>

000002c2 <main>:
 
int main(void){
	#if (KIT_TYPE == 0)
		master_Main();
	#elif (KIT_TYPE == 1)
		slave_Main();
 2c2:	0e 94 1c 01 	call	0x238	; 0x238 <slave_Main>

000002c6 <MCAL_DIO_u8SetPinDir>:
		default :
			Local_u8ErrorStatus = 0;
			break;
	}
	return Local_u8ErrorStatus ;
}
 2c6:	68 30       	cpi	r22, 0x08	; 8
 2c8:	08 f0       	brcs	.+2      	; 0x2cc <MCAL_DIO_u8SetPinDir+0x6>
 2ca:	5d c0       	rjmp	.+186    	; 0x386 <MCAL_DIO_u8SetPinDir+0xc0>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	e1 f0       	breq	.+56     	; 0x308 <MCAL_DIO_u8SetPinDir+0x42>
 2d0:	30 f0       	brcs	.+12     	; 0x2de <MCAL_DIO_u8SetPinDir+0x18>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	71 f1       	breq	.+92     	; 0x332 <MCAL_DIO_u8SetPinDir+0x6c>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	09 f4       	brne	.+2      	; 0x2dc <MCAL_DIO_u8SetPinDir+0x16>
 2da:	40 c0       	rjmp	.+128    	; 0x35c <MCAL_DIO_u8SetPinDir+0x96>
 2dc:	56 c0       	rjmp	.+172    	; 0x38a <MCAL_DIO_u8SetPinDir+0xc4>
 2de:	2a b3       	in	r18, 0x1a	; 26
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <MCAL_DIO_u8SetPinDir+0x26>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <MCAL_DIO_u8SetPinDir+0x22>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <MCAL_DIO_u8SetPinDir+0x36>
 2f8:	44 0f       	add	r20, r20
 2fa:	55 1f       	adc	r21, r21
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <MCAL_DIO_u8SetPinDir+0x32>
 300:	48 2b       	or	r20, r24
 302:	4a bb       	out	0x1a, r20	; 26
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	08 95       	ret
 308:	27 b3       	in	r18, 0x17	; 23
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	06 2e       	mov	r0, r22
 310:	02 c0       	rjmp	.+4      	; 0x316 <MCAL_DIO_u8SetPinDir+0x50>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <MCAL_DIO_u8SetPinDir+0x4c>
 31a:	80 95       	com	r24
 31c:	82 23       	and	r24, r18
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <MCAL_DIO_u8SetPinDir+0x60>
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <MCAL_DIO_u8SetPinDir+0x5c>
 32a:	48 2b       	or	r20, r24
 32c:	47 bb       	out	0x17, r20	; 23
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret
 332:	24 b3       	in	r18, 0x14	; 20
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <MCAL_DIO_u8SetPinDir+0x7a>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <MCAL_DIO_u8SetPinDir+0x76>
 344:	80 95       	com	r24
 346:	82 23       	and	r24, r18
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <MCAL_DIO_u8SetPinDir+0x8a>
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <MCAL_DIO_u8SetPinDir+0x86>
 354:	48 2b       	or	r20, r24
 356:	44 bb       	out	0x14, r20	; 20
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret
 35c:	21 b3       	in	r18, 0x11	; 17
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	06 2e       	mov	r0, r22
 364:	02 c0       	rjmp	.+4      	; 0x36a <MCAL_DIO_u8SetPinDir+0xa4>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <MCAL_DIO_u8SetPinDir+0xa0>
 36e:	80 95       	com	r24
 370:	82 23       	and	r24, r18
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <MCAL_DIO_u8SetPinDir+0xb4>
 376:	44 0f       	add	r20, r20
 378:	55 1f       	adc	r21, r21
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <MCAL_DIO_u8SetPinDir+0xb0>
 37e:	48 2b       	or	r20, r24
 380:	41 bb       	out	0x11, r20	; 17
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	08 95       	ret
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	08 95       	ret

0000038e <MCAL_DIO_u8SetPinValue>:

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
	if(Copy_u8PinNo >= DIO_PIN_0 && Copy_u8PinNo <= DIO_PIN_7){
 38e:	68 30       	cpi	r22, 0x08	; 8
 390:	08 f0       	brcs	.+2      	; 0x394 <MCAL_DIO_u8SetPinValue+0x6>
 392:	5d c0       	rjmp	.+186    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		switch(Copy_u8PortNo){
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	e1 f0       	breq	.+56     	; 0x3d0 <MCAL_DIO_u8SetPinValue+0x42>
 398:	30 f0       	brcs	.+12     	; 0x3a6 <MCAL_DIO_u8SetPinValue+0x18>
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	71 f1       	breq	.+92     	; 0x3fa <MCAL_DIO_u8SetPinValue+0x6c>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <MCAL_DIO_u8SetPinValue+0x16>
 3a2:	40 c0       	rjmp	.+128    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3a4:	56 c0       	rjmp	.+172    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8Value);
 3a6:	2b b3       	in	r18, 0x1b	; 27
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <MCAL_DIO_u8SetPinValue+0x26>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <MCAL_DIO_u8SetPinValue+0x22>
 3b8:	80 95       	com	r24
 3ba:	82 23       	and	r24, r18
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <MCAL_DIO_u8SetPinValue+0x36>
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <MCAL_DIO_u8SetPinValue+0x32>
 3c8:	48 2b       	or	r20, r24
 3ca:	4b bb       	out	0x1b, r20	; 27
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8PinNo >= DIO_PIN_0 && Copy_u8PinNo <= DIO_PIN_7){
		switch(Copy_u8PortNo){
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8Value);
				break ;
 3ce:	08 95       	ret
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8Value);
 3d0:	28 b3       	in	r18, 0x18	; 24
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	06 2e       	mov	r0, r22
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <MCAL_DIO_u8SetPinValue+0x50>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <MCAL_DIO_u8SetPinValue+0x4c>
 3e2:	80 95       	com	r24
 3e4:	82 23       	and	r24, r18
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <MCAL_DIO_u8SetPinValue+0x60>
 3ea:	44 0f       	add	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <MCAL_DIO_u8SetPinValue+0x5c>
 3f2:	48 2b       	or	r20, r24
 3f4:	48 bb       	out	0x18, r20	; 24
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8Value);
				break ;
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8Value);
				break ;
 3f8:	08 95       	ret
			case DIO_PORTC :
				ASSIGN_BIT(PORTC , Copy_u8PinNo , Copy_u8Value);
 3fa:	25 b3       	in	r18, 0x15	; 21
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	06 2e       	mov	r0, r22
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	80 95       	com	r24
 40e:	82 23       	and	r24, r18
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	48 2b       	or	r20, r24
 41e:	45 bb       	out	0x15, r20	; 21
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 420:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8Value);
				break ;
			case DIO_PORTC :
				ASSIGN_BIT(PORTC , Copy_u8PinNo , Copy_u8Value);
				break ;
 422:	08 95       	ret
			case DIO_PORTD :
				ASSIGN_BIT(PORTD , Copy_u8PinNo , Copy_u8Value);
 424:	22 b3       	in	r18, 0x12	; 18
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	06 2e       	mov	r0, r22
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	80 95       	com	r24
 438:	82 23       	and	r24, r18
 43a:	50 e0       	ldi	r21, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	48 2b       	or	r20, r24
 448:	42 bb       	out	0x12, r20	; 18
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 44a:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC :
				ASSIGN_BIT(PORTC , Copy_u8PinNo , Copy_u8Value);
				break ;
			case DIO_PORTD :
				ASSIGN_BIT(PORTD , Copy_u8PinNo , Copy_u8Value);
				break ;
 44c:	08 95       	ret
			default :
				Local_u8ErrorStatus = 0;
				break;
		}
	}else{
		Local_u8ErrorStatus = 0 ;
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret
				break ;
			case DIO_PORTD :
				ASSIGN_BIT(PORTD , Copy_u8PinNo , Copy_u8Value);
				break ;
			default :
				Local_u8ErrorStatus = 0;
 452:	80 e0       	ldi	r24, 0x00	; 0
		}
	}else{
		Local_u8ErrorStatus = 0 ;
	}
	return Local_u8ErrorStatus ;
}
 454:	08 95       	ret

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
