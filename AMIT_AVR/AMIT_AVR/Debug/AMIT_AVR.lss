
AMIT_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001187  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008df  00000000  00000000  000016f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000998  00000000  00000000  00001fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00002970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065d  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099a  00000000  00000000  00003169  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 13 01 	call	0x226	; 0x226 <main>
  9e:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <HAL_LED_GENERIC_INITIALIZATION>:
 void HAL_LED_GENERIC_TURN_ON(uint8_t Copy_u8LedPort , uint8_t Copy_u8LedPin){
	 MCAL_DIO_u8SetPinValue(Copy_u8LedPort , Copy_u8LedPin , DIO_HIGH);
 }

 void HAL_LED_GENERIC_TURN_OFF(uint8_t Copy_u8LedPort , uint8_t Copy_u8LedPin){
	 MCAL_DIO_u8SetPinValue(Copy_u8LedPort , Copy_u8LedPin , DIO_LOW);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	0e 94 15 01 	call	0x22a	; 0x22a <MCAL_DIO_u8SetPinDir>
  ac:	08 95       	ret

000000ae <HAL_LED_GENERIC_TOGGLE>:
 }

 void HAL_LED_GENERIC_TOGGLE(uint8_t Copy_u8LedPort , uint8_t Copy_u8LedPin , uint8_t *state){
  ae:	fa 01       	movw	r30, r20
	 MCAL_DIO_u8SetPinValue(Copy_u8LedPort , Copy_u8LedPin , TOGGLE_BIT(*state,DIO_LOW));
  b0:	40 81       	ld	r20, Z
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	49 27       	eor	r20, r25
  b6:	40 83       	st	Z, r20
  b8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <MCAL_DIO_u8SetPinValue>
  bc:	08 95       	ret

000000be <MCAL_SPI_voidInit>:
	SPDR = u8Data;
	MCAL_DIO_u8SetPinValue(DIO_PORTB,DIO_PIN_4,DIO_LOW);	
	SET_BIT(SPCR,SPCR_SPE);
	while(GET_BIT(SPSR,SPSR_SPIF)!=1);
	CLR_BIT(SPCR,SPCR_SPE);
	MCAL_DIO_u8SetPinValue(DIO_PORTB,DIO_PIN_4,DIO_HIGH);
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
  c4:	88 81       	ld	r24, Y
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	09 f0       	breq	.+2      	; 0xcc <MCAL_SPI_voidInit+0xe>
  ca:	4c c0       	rjmp	.+152    	; 0x164 <MCAL_SPI_voidInit+0xa6>
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	0e 94 15 01 	call	0x22a	; 0x22a <MCAL_DIO_u8SetPinDir>
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	65 e0       	ldi	r22, 0x05	; 5
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 15 01 	call	0x22a	; 0x22a <MCAL_DIO_u8SetPinDir>
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	66 e0       	ldi	r22, 0x06	; 6
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 15 01 	call	0x22a	; 0x22a <MCAL_DIO_u8SetPinDir>
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	67 e0       	ldi	r22, 0x07	; 7
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 15 01 	call	0x22a	; 0x22a <MCAL_DIO_u8SetPinDir>
  f2:	2d b1       	in	r18, 0x0d	; 13
  f4:	98 81       	ld	r25, Y
  f6:	30 e1       	ldi	r19, 0x10	; 16
  f8:	93 9f       	mul	r25, r19
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	92 2f       	mov	r25, r18
 100:	9f 7e       	andi	r25, 0xEF	; 239
 102:	89 2b       	or	r24, r25
 104:	8d b9       	out	0x0d, r24	; 13
 106:	99 81       	ldd	r25, Y+1	; 0x01
 108:	92 30       	cpi	r25, 0x02	; 2
 10a:	48 f4       	brcc	.+18     	; 0x11e <MCAL_SPI_voidInit+0x60>
 10c:	8d b1       	in	r24, 0x0d	; 13
 10e:	28 2f       	mov	r18, r24
 110:	2f 7d       	andi	r18, 0xDF	; 223
 112:	30 e2       	ldi	r19, 0x20	; 32
 114:	93 9f       	mul	r25, r19
 116:	c0 01       	movw	r24, r0
 118:	11 24       	eor	r1, r1
 11a:	82 2b       	or	r24, r18
 11c:	8d b9       	out	0x0d, r24	; 13
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	38 f4       	brcc	.+14     	; 0x132 <MCAL_SPI_voidInit+0x74>
 124:	9d b1       	in	r25, 0x0d	; 13
 126:	97 7f       	andi	r25, 0xF7	; 247
 128:	88 0f       	add	r24, r24
 12a:	88 0f       	add	r24, r24
 12c:	88 0f       	add	r24, r24
 12e:	89 2b       	or	r24, r25
 130:	8d b9       	out	0x0d, r24	; 13
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	30 f4       	brcc	.+12     	; 0x144 <MCAL_SPI_voidInit+0x86>
 138:	9d b1       	in	r25, 0x0d	; 13
 13a:	9b 7f       	andi	r25, 0xFB	; 251
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	89 2b       	or	r24, r25
 142:	8d b9       	out	0x0d, r24	; 13
 144:	8c 81       	ldd	r24, Y+4	; 0x04
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	38 f4       	brcc	.+14     	; 0x158 <MCAL_SPI_voidInit+0x9a>
 14a:	2d b1       	in	r18, 0x0d	; 13
 14c:	9d b1       	in	r25, 0x0d	; 13
 14e:	2c 7f       	andi	r18, 0xFC	; 252
 150:	83 70       	andi	r24, 0x03	; 3
 152:	82 2b       	or	r24, r18
 154:	89 2b       	or	r24, r25
 156:	8d b9       	out	0x0d, r24	; 13
 158:	8c 81       	ldd	r24, Y+4	; 0x04
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	08 f0       	brcs	.+2      	; 0x160 <MCAL_SPI_voidInit+0xa2>
 15e:	70 9a       	sbi	0x0e, 0	; 14
 160:	6e 9a       	sbi	0x0d, 6	; 13
 162:	2c c0       	rjmp	.+88     	; 0x1bc <MCAL_SPI_voidInit+0xfe>
 164:	81 11       	cpse	r24, r1
 166:	2a c0       	rjmp	.+84     	; 0x1bc <MCAL_SPI_voidInit+0xfe>
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	64 e0       	ldi	r22, 0x04	; 4
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 15 01 	call	0x22a	; 0x22a <MCAL_DIO_u8SetPinDir>
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	65 e0       	ldi	r22, 0x05	; 5
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 15 01 	call	0x22a	; 0x22a <MCAL_DIO_u8SetPinDir>
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	66 e0       	ldi	r22, 0x06	; 6
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 15 01 	call	0x22a	; 0x22a <MCAL_DIO_u8SetPinDir>
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	67 e0       	ldi	r22, 0x07	; 7
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 15 01 	call	0x22a	; 0x22a <MCAL_DIO_u8SetPinDir>
 190:	99 81       	ldd	r25, Y+1	; 0x01
 192:	92 30       	cpi	r25, 0x02	; 2
 194:	48 f4       	brcc	.+18     	; 0x1a8 <MCAL_SPI_voidInit+0xea>
 196:	8d b1       	in	r24, 0x0d	; 13
 198:	28 2f       	mov	r18, r24
 19a:	2f 7d       	andi	r18, 0xDF	; 223
 19c:	30 e2       	ldi	r19, 0x20	; 32
 19e:	93 9f       	mul	r25, r19
 1a0:	c0 01       	movw	r24, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	82 2b       	or	r24, r18
 1a6:	8d b9       	out	0x0d, r24	; 13
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	30 f4       	brcc	.+12     	; 0x1ba <MCAL_SPI_voidInit+0xfc>
 1ae:	9d b1       	in	r25, 0x0d	; 13
 1b0:	9b 7f       	andi	r25, 0xFB	; 251
 1b2:	88 0f       	add	r24, r24
 1b4:	88 0f       	add	r24, r24
 1b6:	89 2b       	or	r24, r25
 1b8:	8d b9       	out	0x0d, r24	; 13
 1ba:	6e 9a       	sbi	0x0d, 6	; 13
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <MCAL_SPI_u8SlaveReceive>:
}

uint8_t MCAL_SPI_u8SlaveReceive(){
	//SPDR = 0 ;
	//	set_bit(SPCR,SPCR_SPE);
	while(GET_BIT(SPSR , SPSR_SPIF) != 1);
 1c2:	77 9b       	sbis	0x0e, 7	; 14
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <MCAL_SPI_u8SlaveReceive>
	//	clr_bit(SPCR,SPCR_SPE);
	return SPDR;
 1c6:	8f b1       	in	r24, 0x0f	; 15
 1c8:	08 95       	ret

000001ca <slave_Main>:
		}
	}
	return 0;
}

int slave_Main(){
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <slave_Main+0x6>
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <slave_Main+0x8>
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <slave_Main+0xa>
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t recieved_Character , led_State;
	HAL_LED_GENERIC_INITIALIZATION(LED_0);
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <HAL_LED_GENERIC_INITIALIZATION>
	HAL_LED_GENERIC_INITIALIZATION(LED_1);
 1e0:	67 e0       	ldi	r22, 0x07	; 7
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <HAL_LED_GENERIC_INITIALIZATION>
	ptr_spi obj = {SPI_SLAVE,SPI_MSB,CLK_IDLE_LOW,CLK_SAMPLE_LEADING};
 1e8:	ce 01       	movw	r24, r28
 1ea:	02 96       	adiw	r24, 0x02	; 2
 1ec:	25 e0       	ldi	r18, 0x05	; 5
 1ee:	fc 01       	movw	r30, r24
 1f0:	11 92       	st	Z+, r1
 1f2:	2a 95       	dec	r18
 1f4:	e9 f7       	brne	.-6      	; 0x1f0 <slave_Main+0x26>
	MCAL_SPI_voidInit(&obj);
 1f6:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_SPI_voidInit>
	while (1)
	{
		recieved_Character = MCAL_SPI_u8SlaveReceive();
 1fa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <MCAL_SPI_u8SlaveReceive>
		if (recieved_Character == '1')
 1fe:	81 33       	cpi	r24, 0x31	; 49
 200:	41 f4       	brne	.+16     	; 0x212 <slave_Main+0x48>
			HAL_LED_GENERIC_TOGGLE(LED_0,&led_State);
 202:	ae 01       	movw	r20, r28
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255
 208:	62 e0       	ldi	r22, 0x02	; 2
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 57 00 	call	0xae	; 0xae <HAL_LED_GENERIC_TOGGLE>
 210:	f4 cf       	rjmp	.-24     	; 0x1fa <slave_Main+0x30>
		else if (recieved_Character == '2')
 212:	82 33       	cpi	r24, 0x32	; 50
 214:	91 f7       	brne	.-28     	; 0x1fa <slave_Main+0x30>
			HAL_LED_GENERIC_TOGGLE(LED_1,&led_State);
 216:	ae 01       	movw	r20, r28
 218:	4f 5f       	subi	r20, 0xFF	; 255
 21a:	5f 4f       	sbci	r21, 0xFF	; 255
 21c:	67 e0       	ldi	r22, 0x07	; 7
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 57 00 	call	0xae	; 0xae <HAL_LED_GENERIC_TOGGLE>
 224:	ea cf       	rjmp	.-44     	; 0x1fa <slave_Main+0x30>

00000226 <main>:

int main(void){
	#if (KIT_TYPE == 0)
		master_Main();
	#elif (KIT_TYPE == 1)
		slave_Main();
 226:	0e 94 e5 00 	call	0x1ca	; 0x1ca <slave_Main>

0000022a <MCAL_DIO_u8SetPinDir>:
		default :
			Local_u8ErrorStatus = 0;
			break;
	}
	return Local_u8ErrorStatus ;
}
 22a:	68 30       	cpi	r22, 0x08	; 8
 22c:	08 f0       	brcs	.+2      	; 0x230 <MCAL_DIO_u8SetPinDir+0x6>
 22e:	5d c0       	rjmp	.+186    	; 0x2ea <MCAL_DIO_u8SetPinDir+0xc0>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	e1 f0       	breq	.+56     	; 0x26c <MCAL_DIO_u8SetPinDir+0x42>
 234:	30 f0       	brcs	.+12     	; 0x242 <MCAL_DIO_u8SetPinDir+0x18>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	71 f1       	breq	.+92     	; 0x296 <MCAL_DIO_u8SetPinDir+0x6c>
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	09 f4       	brne	.+2      	; 0x240 <MCAL_DIO_u8SetPinDir+0x16>
 23e:	40 c0       	rjmp	.+128    	; 0x2c0 <MCAL_DIO_u8SetPinDir+0x96>
 240:	56 c0       	rjmp	.+172    	; 0x2ee <MCAL_DIO_u8SetPinDir+0xc4>
 242:	2a b3       	in	r18, 0x1a	; 26
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	06 2e       	mov	r0, r22
 24a:	02 c0       	rjmp	.+4      	; 0x250 <MCAL_DIO_u8SetPinDir+0x26>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <MCAL_DIO_u8SetPinDir+0x22>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <MCAL_DIO_u8SetPinDir+0x36>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <MCAL_DIO_u8SetPinDir+0x32>
 264:	48 2b       	or	r20, r24
 266:	4a bb       	out	0x1a, r20	; 26
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret
 26c:	27 b3       	in	r18, 0x17	; 23
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	06 2e       	mov	r0, r22
 274:	02 c0       	rjmp	.+4      	; 0x27a <MCAL_DIO_u8SetPinDir+0x50>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	0a 94       	dec	r0
 27c:	e2 f7       	brpl	.-8      	; 0x276 <MCAL_DIO_u8SetPinDir+0x4c>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <MCAL_DIO_u8SetPinDir+0x60>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <MCAL_DIO_u8SetPinDir+0x5c>
 28e:	48 2b       	or	r20, r24
 290:	47 bb       	out	0x17, r20	; 23
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	08 95       	ret
 296:	24 b3       	in	r18, 0x14	; 20
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	06 2e       	mov	r0, r22
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <MCAL_DIO_u8SetPinDir+0x7a>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	0a 94       	dec	r0
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <MCAL_DIO_u8SetPinDir+0x76>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <MCAL_DIO_u8SetPinDir+0x8a>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <MCAL_DIO_u8SetPinDir+0x86>
 2b8:	48 2b       	or	r20, r24
 2ba:	44 bb       	out	0x14, r20	; 20
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	08 95       	ret
 2c0:	21 b3       	in	r18, 0x11	; 17
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	06 2e       	mov	r0, r22
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <MCAL_DIO_u8SetPinDir+0xa4>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	0a 94       	dec	r0
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <MCAL_DIO_u8SetPinDir+0xa0>
 2d2:	80 95       	com	r24
 2d4:	82 23       	and	r24, r18
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <MCAL_DIO_u8SetPinDir+0xb4>
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <MCAL_DIO_u8SetPinDir+0xb0>
 2e2:	48 2b       	or	r20, r24
 2e4:	41 bb       	out	0x11, r20	; 17
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	08 95       	ret
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	08 95       	ret
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret

000002f2 <MCAL_DIO_u8SetPinValue>:

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
	if(Copy_u8PinNo >= DIO_PIN_0 && Copy_u8PinNo <= DIO_PIN_7){
 2f2:	68 30       	cpi	r22, 0x08	; 8
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <MCAL_DIO_u8SetPinValue+0x6>
 2f6:	5d c0       	rjmp	.+186    	; 0x3b2 <MCAL_DIO_u8SetPinValue+0xc0>
		switch(Copy_u8PortNo){
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	e1 f0       	breq	.+56     	; 0x334 <MCAL_DIO_u8SetPinValue+0x42>
 2fc:	30 f0       	brcs	.+12     	; 0x30a <MCAL_DIO_u8SetPinValue+0x18>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	71 f1       	breq	.+92     	; 0x35e <MCAL_DIO_u8SetPinValue+0x6c>
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	09 f4       	brne	.+2      	; 0x308 <MCAL_DIO_u8SetPinValue+0x16>
 306:	40 c0       	rjmp	.+128    	; 0x388 <MCAL_DIO_u8SetPinValue+0x96>
 308:	56 c0       	rjmp	.+172    	; 0x3b6 <MCAL_DIO_u8SetPinValue+0xc4>
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8Value);
 30a:	2b b3       	in	r18, 0x1b	; 27
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	06 2e       	mov	r0, r22
 312:	02 c0       	rjmp	.+4      	; 0x318 <MCAL_DIO_u8SetPinValue+0x26>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <MCAL_DIO_u8SetPinValue+0x22>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <MCAL_DIO_u8SetPinValue+0x36>
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <MCAL_DIO_u8SetPinValue+0x32>
 32c:	48 2b       	or	r20, r24
 32e:	4b bb       	out	0x1b, r20	; 27
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8PinNo >= DIO_PIN_0 && Copy_u8PinNo <= DIO_PIN_7){
		switch(Copy_u8PortNo){
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8Value);
				break ;
 332:	08 95       	ret
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8Value);
 334:	28 b3       	in	r18, 0x18	; 24
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	06 2e       	mov	r0, r22
 33c:	02 c0       	rjmp	.+4      	; 0x342 <MCAL_DIO_u8SetPinValue+0x50>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <MCAL_DIO_u8SetPinValue+0x4c>
 346:	80 95       	com	r24
 348:	82 23       	and	r24, r18
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <MCAL_DIO_u8SetPinValue+0x60>
 34e:	44 0f       	add	r20, r20
 350:	55 1f       	adc	r21, r21
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <MCAL_DIO_u8SetPinValue+0x5c>
 356:	48 2b       	or	r20, r24
 358:	48 bb       	out	0x18, r20	; 24
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8Value);
				break ;
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8Value);
				break ;
 35c:	08 95       	ret
			case DIO_PORTC :
				ASSIGN_BIT(PORTC , Copy_u8PinNo , Copy_u8Value);
 35e:	25 b3       	in	r18, 0x15	; 21
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	06 2e       	mov	r0, r22
 366:	02 c0       	rjmp	.+4      	; 0x36c <MCAL_DIO_u8SetPinValue+0x7a>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <MCAL_DIO_u8SetPinValue+0x76>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <MCAL_DIO_u8SetPinValue+0x8a>
 378:	44 0f       	add	r20, r20
 37a:	55 1f       	adc	r21, r21
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <MCAL_DIO_u8SetPinValue+0x86>
 380:	48 2b       	or	r20, r24
 382:	45 bb       	out	0x15, r20	; 21
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 384:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8Value);
				break ;
			case DIO_PORTC :
				ASSIGN_BIT(PORTC , Copy_u8PinNo , Copy_u8Value);
				break ;
 386:	08 95       	ret
			case DIO_PORTD :
				ASSIGN_BIT(PORTD , Copy_u8PinNo , Copy_u8Value);
 388:	22 b3       	in	r18, 0x12	; 18
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	06 2e       	mov	r0, r22
 390:	02 c0       	rjmp	.+4      	; 0x396 <MCAL_DIO_u8SetPinValue+0xa4>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <MCAL_DIO_u8SetPinValue+0xa0>
 39a:	80 95       	com	r24
 39c:	82 23       	and	r24, r18
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <MCAL_DIO_u8SetPinValue+0xb4>
 3a2:	44 0f       	add	r20, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <MCAL_DIO_u8SetPinValue+0xb0>
 3aa:	48 2b       	or	r20, r24
 3ac:	42 bb       	out	0x12, r20	; 18
	}
	return Local_u8ErrorStatus ;
}

uint8_t MCAL_DIO_u8SetPinValue(uint8_t Copy_u8PortNo ,  uint8_t Copy_u8PinNo ,uint8_t Copy_u8Value ){
	uint8_t Local_u8ErrorStatus  = 1;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC :
				ASSIGN_BIT(PORTC , Copy_u8PinNo , Copy_u8Value);
				break ;
			case DIO_PORTD :
				ASSIGN_BIT(PORTD , Copy_u8PinNo , Copy_u8Value);
				break ;
 3b0:	08 95       	ret
			default :
				Local_u8ErrorStatus = 0;
				break;
		}
	}else{
		Local_u8ErrorStatus = 0 ;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
				break ;
			case DIO_PORTD :
				ASSIGN_BIT(PORTD , Copy_u8PinNo , Copy_u8Value);
				break ;
			default :
				Local_u8ErrorStatus = 0;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}else{
		Local_u8ErrorStatus = 0 ;
	}
	return Local_u8ErrorStatus ;
}
 3b8:	08 95       	ret

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
